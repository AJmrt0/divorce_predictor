# -*- coding: utf-8 -*-
"""divorce _predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12UkUlL-kFTR2U3FyxmUG0-C5KEjZg4BL
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

from google.colab import files
uploaded = files.upload ()

divorce_data = pd.read_csv('divorce_data.csv')

divorce_data.head()

divorce_data.tail()

divorce_data.shape

divorce_data.columns

divorce_data.duplicated().sum()

divorce_data.isnull().sum()

from google.colab import files
uploaded = files.upload ()

with open('divorce.txt') as f:
   contents = f.read() 
   print(contents)

divorce_data.info()

divorce_data.describe()

divorce_data.nunique()

for i in divorce_data.columns:
    plt.figure(figsize=(15,6))
    sns.countplot(divorce_data[i], data = divorce_data)
    plt.show()

divorce_data['Class'].values

divorce_data['Class'].unique()

divorce_data['Class'].value_counts()

plt.figure(figsize=(15,6))
sns.countplot('Class', data = divorce_data)
plt.xticks(rotation = 90)
plt.show()

plt.figure(figsize=(20,10))
colors = sns.color_palette('bright')
explode = [0.3, 0.02]
plt.pie(divorce_data['Class'].value_counts(), colors = colors,
        labels = [0, 1], autopct = '%0.0f%%', shadow = 'True',
        explode = explode , startangle = 180)
plt.show()

plt.figure(figsize=(15,6))
sns.histplot(x=divorce_data['Class'],y=divorce_data.index)
plt.xticks(rotation = 90)
plt.show()

fig, axes = plt.subplots(11,5,figsize=(28,25))
s=0
for i in range(0,11):
  for j in range(0,5):
    s+=1
    if s==54:
      break
      sns.countplot(ax = axes[i,j],x=f'Atr{s}',data=divorce_data,
                    hue='Class')
      axes[i,j].set_title(f'Atr{s}')

divorce_data.corr()

plt.figure(figsize=(10, 8))
matrix = np.triu(divorce_data.corr())
sns.heatmap(divorce_data.corr(), annot=False, linewidth=.8, mask=matrix, cmap="rocket");
plt.show()

x = divorce_data.drop('Class',axis =1)
y = divorce_data['Class']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y,
                                                    test_size=0.15,
                                                    random_state=42)

# importing module
from sklearn.linear_model import LogisticRegression
# creating an object of LinearRegression class
LR = LogisticRegression()
# fitting the training data
LR.fit(x_train,y_train)

y_prediction = LR.predict(x_test)
y_prediction

print("Training Accuracy :", LR.score(x_train, y_train))
print("Testing Accuracy :", LR.score(x_test, y_test))

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(x_train, y_train)

y_prediction = dt.predict(x_test)
y_prediction

print("Training Accuracy :", dt.score(x_train, y_train))
print("Testing Accuracy :", dt.score(x_test, y_test))

from tensorflow.keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from tensorflow.keras.models import Sequential 
# initialize neural network library from tensorflow.keras.layers import Dense # build our layers library

def build_classifier():
  return classifier

classifier = KerasClassifier(build_fn = build_classifier, epochs = 50)
accuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 2)
mean = accuracies.mean()
variance = accuracies.std()

print("Accuracy mean: "+ str(mean))